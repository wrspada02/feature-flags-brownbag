require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/feature_flags", type: :request do
  
  # This should return the minimal set of attributes required to create a valid
  # FeatureFlag. As you add validations to FeatureFlag, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: "Feature 1", value: true }
  }

  let(:invalid_attributes) {
    { name: "", value: nil }
  }

  describe "GET /index" do
    it "renders a successful response" do
      FeatureFlag.create! valid_attributes
      get feature_flags_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      feature_flag = FeatureFlag.create! valid_attributes
      get feature_flag_url(feature_flag)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_feature_flag_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      feature_flag = FeatureFlag.create! valid_attributes
      get edit_feature_flag_url(feature_flag)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new FeatureFlag" do
        expect {
          post feature_flags_url, params: { feature_flag: valid_attributes }
        }.to change(FeatureFlag, :count).by(1)
      end

      it "redirects to the created feature_flag" do
        post feature_flags_url, params: { feature_flag: valid_attributes }
        expect(response).to redirect_to(feature_flag_url(FeatureFlag.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new FeatureFlag" do
        expect {
          post feature_flags_url, params: { feature_flag: invalid_attributes }
        }.to change(FeatureFlag, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post feature_flags_url, params: { feature_flag: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "Feature 1", value: false }
      }

      it "updates the requested feature_flag", :aggregate_failures do
        feature_flag = FeatureFlag.create! valid_attributes
        patch feature_flag_url(feature_flag), params: { feature_flag: new_attributes }
        feature_flag.reload
        expect(feature_flag.name).to eq("Feature 1")
        expect(feature_flag.value).to eq(false)
      end

      it "redirects to the feature_flag" do
        feature_flag = FeatureFlag.create! valid_attributes
        patch feature_flag_url(feature_flag), params: { feature_flag: new_attributes }
        feature_flag.reload
        expect(response).to redirect_to(feature_flag_url(feature_flag))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        feature_flag = FeatureFlag.create! valid_attributes
        patch feature_flag_url(feature_flag), params: { feature_flag: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_content)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested feature_flag" do
      feature_flag = FeatureFlag.create! valid_attributes
      expect {
        delete feature_flag_url(feature_flag)
      }.to change(FeatureFlag, :count).by(-1)
    end

    it "redirects to the feature_flags list" do
      feature_flag = FeatureFlag.create! valid_attributes
      delete feature_flag_url(feature_flag)
      expect(response).to redirect_to(feature_flags_url)
    end
  end
end
